<Page
    x:Class="BSE.Tunes.StoreApp.Views.PlaylistDetailPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controlextensions="using:BSE.Tunes.StoreApp.Controls.Extensions"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:behaviors="using:Microsoft.Toolkit.Uwp.UI.Behaviors"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:vm="using:BSE.Tunes.StoreApp.ViewModels"
    xmlns:usercontrols="using:BSE.Tunes.StoreApp.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Page.DataContext>
        <vm:PlaylistDetailPageViewModel x:Name="ViewModel" />
    </Page.DataContext>

    <Page.Resources>
        <DataTemplate x:Name="normalListViewItem">
            <UserControl>
                <Grid x:Name="listViewItem" Height="48" Margin="0">
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="AdaptiveVisualStateGroup">
                            <VisualState x:Name="VisualStateNarrow">
                                <VisualState.StateTriggers>
                                    <AdaptiveTrigger MinWindowWidth="{StaticResource NarrowMinWidth}" />
                                </VisualState.StateTriggers>
                                <VisualState.Setters>
                                    <Setter Target="listViewItem.ColumnDefinitions[2].MinWidth" Value="0"/>
                                    <Setter Target="listViewItem.ColumnDefinitions[2].Width" Value="0"/>
                                    <Setter Target="listViewItem.ColumnDefinitions[3].MinWidth" Value="0"/>
                                    <Setter Target="listViewItem.ColumnDefinitions[3].Width" Value="0"/>
                                    <!--<Setter Target="listViewItem.ColumnDefinitions[4].Width" Value="0"/>-->
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="VisualStateNormal">
                                <VisualState.StateTriggers>
                                    <AdaptiveTrigger MinWindowWidth="{StaticResource NormalMinWidth}" />
                                </VisualState.StateTriggers>
                                <VisualState.Setters>
                                    <Setter Target="listViewItem.ColumnDefinitions[1].MinWidth" Value="0"/>
                                    <Setter Target="listViewItem.ColumnDefinitions[1].Width" Value="0"/>
                                    <Setter Target="listViewItem.ColumnDefinitions[2].MinWidth" Value="0"/>
                                    <Setter Target="listViewItem.ColumnDefinitions[2].Width" Value="0"/>
                                    <Setter Target="listViewItem.ColumnDefinitions[3].Width" Value="0"/>
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="VisualStateWide">
                                <VisualState.StateTriggers>
                                    <AdaptiveTrigger MinWindowWidth="{StaticResource WideMinWidth}" />
                                </VisualState.StateTriggers>
                                <VisualState.Setters>
                                    <Setter Target="listViewItem.ColumnDefinitions[1].MinWidth" Value="200"/>
                                    <Setter Target="listViewItem.ColumnDefinitions[2].MinWidth"  Value="200"/>
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="300" MaxWidth="400"/>
                        <ColumnDefinition MinWidth="200" MaxWidth="400"/>
                        <ColumnDefinition MinWidth="200" MaxWidth="400"/>
                        <ColumnDefinition Width="80"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <FlyoutBase.AttachedFlyout>
                        <MenuFlyout controlextensions:FlyoutExtensions.IsOpen="{Binding IsOpen, Mode=TwoWay}" 
                                                controlextensions:FlyoutExtensions.Parent="{Binding ElementName=listViewItem}"
                                                controlextensions:FlyoutExtensions.OffsetPoint="{Binding OffsetPoint, Mode=TwoWay}">
                            <MenuFlyout.Items>
                                <!--<MenuFlyoutItem x:Uid="MenuFlyoutAddTo" Text="Add to"/>-->
                                <MenuFlyoutItem x:Uid="MenuFlyoutShowAlbum" Text="Show Album" Command="{Binding DataContext.ShowAlbumCommand, ElementName=listview}" CommandParameter="{Binding}"/>
                                <MenuFlyoutItem x:Uid="MenuFlyoutSelectItems" Text="Select" Command="{Binding DataContext.SelectItemsCommand, ElementName=listview}" CommandParameter="{Binding}"
                                                            Visibility="{Binding DataContext.HasSelectedItems, ElementName=listview, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=true, Mode=TwoWay}"/>
                                <MenuFlyoutItem x:Uid="MenuFlyoutSelectAllItems" Text="Select All" Command="{Binding DataContext.SelectAllItemsCommand, ElementName=listview}" CommandParameter="{Binding}"
                                            Visibility="{Binding DataContext.AllItemsSelectable, ElementName=listview, Converter={StaticResource BooleanToVisibilityConverter}, Mode=TwoWay}"/>
                                <MenuFlyoutItem x:Uid="MenuFlyoutUnSelectAll" Text="Unselect All" Command="{Binding DataContext.ClearSelectionCommand, ElementName=listview}" CommandParameter="{Binding}"
                                            Visibility="{Binding DataContext.AllItemsSelected, ElementName=listview, Converter={StaticResource BooleanToVisibilityConverter}, Mode=TwoWay}"/>
                            </MenuFlyout.Items>
                        </MenuFlyout>
                    </FlyoutBase.AttachedFlyout>
                    <TextBlock Text="{Binding Data.Track.Name}" TextTrimming="WordEllipsis" VerticalAlignment="Center" Grid.Column="0"/>
                    <TextBlock Text="{Binding Data.Track.Album.Artist.Name}" TextTrimming="WordEllipsis" VerticalAlignment="Center" Grid.Column="1"/>
                    <TextBlock Text="{Binding Data.Track.Album.Title}" TextTrimming="WordEllipsis" VerticalAlignment="Center" Grid.Column="2"/>
                    <TextBlock Text="{Binding Data.Track.Album.Year}" VerticalAlignment="Center" TextAlignment="Right" Grid.Column="3"/>
                    <TextBlock Text="{Binding Data.Track.Duration}" Margin="10,0,52,0" VerticalAlignment="Center" TextAlignment="Right" Grid.Column="4"/>
                    <interactivity:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="RightTapped">
                            <core:InvokeCommandAction Command="{Binding DataContext.ShowFlyoutCommand, ElementName=listview}"
                                                                  InputConverter="{StaticResource RightTappedToPointConverter}"
                                                                  InputConverterParameter="{Binding ElementName=listViewItem}"/>
                        </core:EventTriggerBehavior>
                    </interactivity:Interaction.Behaviors>
                </Grid>
            </UserControl>
        </DataTemplate>
    </Page.Resources>

    <Grid>
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="AdaptiveVisualStateGroup">
                <VisualState x:Name="VisualStateNarrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NarrowMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="infoHeader.Orientation" Value="Vertical"/>
                        <Setter Target="infoCover.Width" Value="160"/>
                        <Setter Target="infoAction.Height" Value="Auto"/>
                        <Setter Target="infoProperties.Height" Value="Auto"/>
                        <Setter Target="infoTitle.HorizontalAlignment" Value="Center"/>
                        <Setter Target="infoSubTitle.HorizontalAlignment" Value="Center"/>
                        <Setter Target="infoAction.HorizontalAlignment" Value="Center"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateNormal">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NormalMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="pageHeader.Visibility" Value="Collapsed"/>
                        <Setter Target="listview.ItemTemplate" Value="{StaticResource normalListViewItem}"/>
                        <Setter Target="listview.AlternatingRow" Value="{StaticResource ListViewAlternatingRowBrush}"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateWide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource WideMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="listview.ItemTemplate" Value="{StaticResource normalListViewItem}"/>
                        <Setter Target="listview.AlternatingRow" Value="{StaticResource ListViewAlternatingRowBrush}"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <usercontrols:ListView x:Name="listview" Margin="20,20,20,0"
                                           AllowDrop="{Binding HasSelectedItems, Converter={StaticResource InverseBooleanConverter}}"
                                           CanDragItems="True" CanReorderItems="True"
                                           ItemTemplate="{StaticResource normalListViewItem}"
                                           EnablePreSelection="True"
                                           PreSelectionCommand="{Binding SelectItemsCommand}"
                                           AlternatingRow="{StaticResource ListViewAlternatingRowBrush}"
                                           ItemsSource="{Binding Items}" SelectionMode="{Binding HasSelectedItems, Converter={StaticResource BooleanToSelectionModeConverter}}"
                                           IsItemClickEnabled="{Binding HasSelectedItems, Converter={StaticResource InverseBooleanConverter}}"
                                           controlextensions:ListViewExtensions.Command="{Binding PlayTrackCommand}" 
                                           controlextensions:ListViewExtensions.SelectedItems="{Binding SelectedItems, Mode=TwoWay}">
            <interactivity:Interaction.Behaviors>
                <behaviors:StickyHeaderBehavior />
                <core:EventTriggerBehavior EventName="DragItemsCompleted">
                    <core:InvokeCommandAction Command="{x:Bind ViewModel.UpdatePlaylistCommand}"/>
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <ListView.Header>
                <StackPanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
                    <StackPanel x:Name="infoPart">
                        <StackPanel x:Name="infoHeader" Orientation="Horizontal">
                            <StackPanel.Background>
                                <ImageBrush ImageSource="{Binding CoverSource}" Stretch="UniformToFill" Opacity="0.2"/>
                            </StackPanel.Background>
                            <Image x:Name="infoCover" Source="{Binding CoverSource}" Width="240" Height="{Binding Path=Width, RelativeSource={RelativeSource Mode=Self}}" Margin="10" Stretch="UniformToFill"/>
                            <Grid x:Name="infoProperties" Margin="10" Height="240">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition x:Name="actionRow" Height="*"/>
                                </Grid.RowDefinitions>
                                <TextBlock x:Name="infoTitle" Text="{Binding Playlist.Name}" TextTrimming="WordEllipsis" Style="{StaticResource TitleTextBlockStyle}" Grid.Row="0"/>
                                <TextBlock x:Name="infoSubTitle" Text="{Binding InfoSubTitle}" Style="{StaticResource SubtitleTextBlockStyle}" TextTrimming="WordEllipsis" Grid.Row="1"/>
                                <StackPanel x:Name="infoAction" Orientation="Horizontal" Grid.Row="3" VerticalAlignment="Bottom">
                                    <CommandBar DefaultLabelPosition="Right">
                                        <AppBarButton x:Uid="PlaylistDetailPage_PlayAll" Background="{ThemeResource SystemAccentColor}" Command="{Binding PlayAllCommand}">
                                            <FontIcon Glyph="&#xE102;"/>
                                        </AppBarButton>
                                        <AppBarButton x:Uid="PlaylistDetailPage_PlayRandom" Command="{Binding PlayRandomCommand}">
                                            <FontIcon Glyph="&#xE8B1;"/>
                                        </AppBarButton>
                                        <AppBarButton x:Name="infoButtonAddTo" x:Uid="PlaylistDetailPage_AddTo" Command="{Binding OpenAllToPlaylistCommand}">
                                            <FontIcon Glyph="&#xE710;"/>
                                            <AppBarButton.ContextFlyout>
                                                <Flyout controlextensions:FlyoutExtensions.IsOpen="{Binding IsAllToPlaylistFlyoutOpen, Mode=TwoWay}"
                                                controlextensions:FlyoutExtensions.Parent="{Binding ElementName=infoButtonAddTo}"
                                                controlextensions:FlyoutExtensions.ItemsSource="{Binding MenuItemsPlaylist}">
                                                    <controlextensions:FlyoutExtensions.ItemTemplate>
                                                        <DataTemplate>
                                                            <Grid>
                                                                <MenuFlyoutItem Command="{Binding MenuItemClickedCommand}"
                                                                        CommandParameter="{Binding}"
                                                                        controlextensions:MenuFlyoutItem.UpdateTagTarget="True"
                                                                        Tag="{Binding InsertMode, ConverterParameter=All, Converter={StaticResource InsertModeConverter}, Mode=TwoWay}"
                                                                        Text="{Binding Text}"
                                                                        Visibility="{Binding IsSeparator, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=true}"/>
                                                                <MenuFlyoutSeparator Visibility="{Binding IsSeparator, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=false}"/>
                                                            </Grid>
                                                        </DataTemplate>
                                                    </controlextensions:FlyoutExtensions.ItemTemplate>
                                                </Flyout>
                                            </AppBarButton.ContextFlyout>
                                        </AppBarButton>
                                        <AppBarButton x:Uid="PlaylistDetailPage_Delete" Icon="Delete" Command="{Binding RemovePlaylistCommand}"/>
                                    </CommandBar>
                                    <!--<HyperlinkButton Command="{Binding PlayAllCommand}" VerticalContentAlignment="Center" Foreground="{ThemeResource SystemBaseHighColor}">
                                    <Grid VerticalAlignment="Center">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <FontIcon Glyph="&#xE102;" Grid.Column="0"/>
                                        <TextBlock x:Uid="PlaylistDetailPage_PlayAll" Text="Alle wiedergeben" Margin="6,0,0,0" Grid.Column="1"/>
                                    </Grid>
                                </HyperlinkButton>

                                <HyperlinkButton x:Name="buttonPlayRandom" Command="{Binding PlayRandomCommand}" Padding="10,0,0,0" VerticalContentAlignment="Center" Foreground="{ThemeResource SystemBaseHighColor}">
                                    <Grid VerticalAlignment="Center">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <FontIcon Glyph="&#xE8B1;" Grid.Column="0"/>
                                        <TextBlock x:Uid="PlaylistDetailPage_PlayRandom" Text="zufällige Wiedergabe" Margin="6,0,0,0" Grid.Column="1"/>
                                    </Grid>
                                </HyperlinkButton>

                                <HyperlinkButton x:Name="buttonAddAllTo" Padding="10,0,0,0" Command="{Binding OpenAllToPlaylistCommand}" VerticalContentAlignment="Center" Foreground="{ThemeResource SystemBaseHighColor}">
                                    <Grid VerticalAlignment="Center">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <FontIcon Glyph="&#xE710;" Grid.Column="0"/>
                                        <TextBlock x:Uid="PlaylistDetailPage_AddTo" Text="Hinzufügen zu" Margin="6,0,0,0" Grid.Column="1"/>
                                    </Grid>
                                    <HyperlinkButton.ContextFlyout>
                                        <Flyout controlextensions:FlyoutExtensions.IsOpen="{Binding IsAllToPlaylistFlyoutOpen, Mode=TwoWay}"
                                                controlextensions:FlyoutExtensions.Parent="{Binding ElementName=buttonAddAllTo}"
                                                controlextensions:FlyoutExtensions.ItemsSource="{Binding MenuItemsPlaylist}">
                                            <controlextensions:FlyoutExtensions.ItemTemplate>
                                                <DataTemplate>
                                                    <Grid>
                                                        <MenuFlyoutItem Command="{Binding MenuItemClickedCommand}"
                                                                        CommandParameter="{Binding}"
                                                                        controlextensions:MenuFlyoutItem.UpdateTagTarget="True"
                                                                        Tag="{Binding InsertMode, ConverterParameter=All, Converter={StaticResource InsertModeConverter}, Mode=TwoWay}"
                                                                        Text="{Binding Text}"
                                                                        Visibility="{Binding IsSeparator, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=true}"/>
                                                        <MenuFlyoutSeparator Visibility="{Binding IsSeparator, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=false}"/>
                                                    </Grid>
                                                </DataTemplate>
                                            </controlextensions:FlyoutExtensions.ItemTemplate>
                                        </Flyout>
                                    </HyperlinkButton.ContextFlyout>
                                </HyperlinkButton>-->
                                </StackPanel>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Height="45">
                        <CommandBar DefaultLabelPosition="Right" Visibility="{Binding IsCommandBarVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <AppBarButton x:Uid="ButtonClearSelection" Icon="Bullets" Command="{Binding ClearSelectionCommand}"/>
                            <AppBarButton x:Uid="ButtonPlaySelection" Icon="Play" Background="{ThemeResource SystemAccentColor}"
                            Command="{Binding PlaySelectedItemsCommand}"/>
                            <AppBarButton x:Name="buttonAddTo" x:Uid="ButtonAddToPlaylist" Icon="Add"
                            Command="{Binding OpenPlaylistFlyoutCommand}">
                                <AppBarButton.ContextFlyout>
                                    <Flyout controlextensions:FlyoutExtensions.IsOpen="{Binding IsPlaylistFlyoutOpen, Mode=TwoWay}"
                            controlextensions:FlyoutExtensions.Parent="{Binding ElementName=buttonAddTo}"
                            controlextensions:FlyoutExtensions.ItemsSource="{Binding MenuItemsPlaylist}">
                                        <controlextensions:FlyoutExtensions.ItemTemplate>
                                            <DataTemplate>
                                                <Grid>
                                                    <MenuFlyoutItem Command="{Binding MenuItemClickedCommand}"
                                                    CommandParameter="{Binding}"
                                                    Text="{Binding Text}"
                                                    controlextensions:MenuFlyoutItem.UpdateTagTarget="True"
                                                    Tag="{Binding InsertMode, ConverterParameter=Selected, Converter={StaticResource InsertModeConverter}, Mode=TwoWay}"
                                                    Visibility="{Binding IsSeparator, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=true}"/>
                                                    <MenuFlyoutSeparator Visibility="{Binding IsSeparator, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=false}"/>
                                                </Grid>
                                            </DataTemplate>
                                        </controlextensions:FlyoutExtensions.ItemTemplate>
                                    </Flyout>
                                </AppBarButton.ContextFlyout>
                            </AppBarButton>
                            <AppBarButton x:Uid="ButtonDeleteItems" Icon="Delete" Command="{Binding DeleteSelectedItemsCommand}"/>
                            <AppBarButton x:Uid="ButtonSelectAll" Icon="SelectAll" Command="{Binding SelectAllItemsCommand}" Visibility="{Binding AllItemsSelected, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=true, Mode=TwoWay}"/>
                            <AppBarButton x:Uid="ButtonUnSelectAll" Icon="ClearSelection" Command="{Binding ClearSelectionCommand}" Visibility="{Binding AllItemsSelected, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=false, Mode=TwoWay}"/>
                        </CommandBar>
                    </StackPanel>
                </StackPanel>
            </ListView.Header>
        </usercontrols:ListView>
    </Grid>
</Page>
